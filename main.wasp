app RoomBooking {
  wasp: {
    version: "^0.11.5"
  },
  dependencies: [
    ("@headlessui/react", "^1.7.17"),
    ("@heroicons/react", "^2.0.18"),
    ("date-fns", "^2.30.0")
  ],
  title: "bookd",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx"
  },
  db: {
    system: PostgreSQL,
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"]
    }
  },
  emailSender: {
    provider: SendGrid,
  },
  auth: {
    userEntity: User,
    methods: {
      // 2. Enable email authentication
      email: {
        // 3. Specify the email from field
        fromField: {
          name: "Room booking app",
          email: "frej.andreassen@falkenberg.se"
        },
        // 4. Specify the email verification and password reset options (we'll talk about them later)
        emailVerification: {
          clientRoute: EmailVerificationRoute,
        },
        passwordReset: {
          clientRoute: PasswordResetRoute,
        },
        allowUnverifiedLogin: false,
      },
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import { Login } from "@client/pages/auth.jsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import { Signup } from "@client/pages/auth.jsx"
}

route RequestPasswordResetRoute { path: "/request-password-reset", to: RequestPasswordResetPage }
page RequestPasswordResetPage {
  component: import { RequestPasswordReset } from "@client/pages/auth.jsx",
}

route PasswordResetRoute { path: "/password-reset", to: PasswordResetPage }
page PasswordResetPage {
  component: import { PasswordReset } from "@client/pages/auth.jsx",
}

route EmailVerificationRoute { path: "/email-verification", to: EmailVerificationPage }
page EmailVerificationPage {
  component: import { EmailVerification } from "@client/pages/auth.jsx",
}
entity User {=psl
    id                      Int               @id @default(autoincrement())
    email                   String?           @unique
    password                String?
    isEmailVerified         Boolean           @default(false)
    emailVerificationSentAt DateTime?
    passwordResetSentAt     DateTime?
    bookings                Booking[]
    memberships             GroupMembership[]
    createdInvites            GroupInvite[]
psl=}

entity Room {=psl
    id          Int       @id @default(autoincrement())
    name        String    @default("")
    description String    @default("")
    groupId     Int       
    group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
    bookings    Booking[]
psl=}

entity Booking {=psl
    id          Int       @id @default(autoincrement())
    date        String
    startTime   DateTime
    endTime     DateTime
    color       String    @default("green")
    description String
    room        Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId      Int
    user        User      @relation(fields: [userId], references: [id])
    userId      Int
psl=}

entity Group {=psl
    id          Int     @id @default(autoincrement())
    name        String  @default("")
    description String  @default("")
    rooms       Room[]
    members     GroupMembership[]
    invites     GroupInvite[]
psl=}

entity GroupMembership {=psl
    groupId     Int
    group       Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
    userId      Int
    user        User    @relation(fields: [userId], references: [id])
    role        String    @default("MEMBER")
    @@id([groupId, userId])
psl=}

entity GroupInvite {=psl
    id            Int               @id @default(autoincrement())
    groupId       Int
    group         Group   @relation(fields: [groupId], references: [id], onDelete: Cascade)
    invitedEmail  String
    role          String  @default("MEMBER")
    response      String  @default("")
    createdById   Int     
    createdBy     User    @relation(fields: [createdById], references: [id])
psl=}



action createRoom {
  fn: import { createRoom } from "@server/actions.js",
  entities: [Room, Group]
}

action updateRoom {
  fn: import { updateRoom } from "@server/actions.js",
  entities: [Room, Group, GroupMembership]
}

action deleteRoom {
  fn: import { deleteRoom } from "@server/actions.js",
  entities: [Room, Group, GroupMembership]
}

action createBooking {
  fn: import { createBooking } from "@server/actions.js",
  entities: [Booking]
}

action updateBooking {
  fn: import { updateBooking } from "@server/actions.js",
  entities: [Booking]
}

action deleteBooking {
  fn: import { deleteBooking } from "@server/actions.js",
  entities: [Booking]
}

action acceptInvitation {
  fn: import { acceptInvitation } from "@server/actions.js",
  entities: [GroupMembership, GroupInvite]
}

action declineInvitation {
  fn: import { declineInvitation } from "@server/actions.js",
  entities: [GroupInvite]
}

action createGroup {
  fn: import { createGroup } from "@server/actions.js",
  entities: [Group, GroupMembership]
}

action updateGroup {
  fn: import { updateGroup } from "@server/actions.js",
  entities: [Group, GroupMembership]
}

action deleteGroup {
  fn: import { deleteGroup } from "@server/actions.js",
  entities: [Group, GroupMembership]
}

action updateGroupMembership {
  fn: import { updateGroupMembership } from "@server/actions.js",
  entities: [GroupMembership]
}
action deleteGroupMembership {
  fn: import { deleteGroupMembership } from "@server/actions.js",
  entities: [ GroupMembership, Group ]
}

action createInvitation {
  fn: import { createInvitation } from "@server/actions.js",
  entities: [GroupInvite, GroupMembership]
}

action deleteInvitation {
  fn: import { deleteInvitation } from "@server/actions.js",
  entities: [GroupInvite, GroupMembership]
}

query getMembership {
  fn: import { getMembership } from "@server/queries.js",
  entities: [GroupMembership]
}


query getGroupsByUser {
  fn: import { getGroupsByUser } from "@server/queries.js",
  entities: [GroupMembership]
}

query getRooms {
  fn: import { getRooms } from "@server/queries.js",
  entities: [Room]
}

query getRoomsByGroup {
  fn: import { getRoomsByGroup } from "@server/queries.js",
  entities: [Room, GroupMembership]
}

query getRoomsByUser {
  fn: import { getRoomsByUser } from "@server/queries.js",
  entities: [Room, Booking]
}

query getBookings {
  fn: import { getBookings } from "@server/queries.js",
  entities: [Booking]
}

query getBookingsByGroup {
  fn: import { getBookingsByGroup } from "@server/queries.js",
  entities: [Booking]
}

query getBookingsByUser {
  fn: import { getBookingsByUser } from "@server/queries.js",
  entities: [Booking]
}

query getGroupInvites {
  fn: import { getGroupInvites } from "@server/queries.js",
  entities: [GroupInvite]
}

query getGroupInvitesByGroup {
  fn: import { getGroupInvitesByGroup } from "@server/queries.js",
  entities: [GroupInvite]
}

query getGroup {
  fn: import { getGroup } from "@server/queries.js",
  entities: [Group]
}

route HomePage { path: "/", to: Home }
page Home {
  component: import { HomePage } from "@client/pages/Home.jsx",
  authRequired: true
}

route GroupRoute { path: "/g/:groupId", to: GroupPage }
page GroupPage {
  component: import { GroupPage } from "@client/pages/Group.jsx",
  authRequired: true
}


route GroupSettinsRoute { path: "/g/:groupId/settings", to: GroupSettings }
page GroupSettings {
  component: import { GroupSettingsPage } from "@client/pages/GroupSettings.jsx",
  authRequired: true
}


route SettinsRoute { path: "/settings", to: Settings }
page Settings {
  component: import { SettingsPage } from "@client/pages/Settings.jsx",
  authRequired: true
}